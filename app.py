# -*- coding: utf-8 -*-
"""app.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/187Rsyabb07L9_cRD6Yzm1TJjrCWRKF6J
"""

from flask import Flask, request, abort

from linebot.v3 import WebhookHandler
from linebot.v3.exceptions import InvalidSignatureError
from linebot.v3.webhooks import MessageEvent, TextMessageContent, PostbackEvent
from linebot.v3.messaging import (
    Configuration, ApiClient, MessagingApi, ReplyMessageRequest,
    TextMessage,
    TemplateMessage, ConfirmTemplate, MessageAction,
    ButtonsTemplate, URIAction, LocationAction, CameraAction, CameraRollAction,
    CarouselTemplate, CarouselColumn, PostbackAction,
    ImageCarouselTemplate, ImageCarouselColumn
)
import os

app = Flask(__name__)

configuration = Configuration(access_token=os.getenv('LINE_CHANNEL_ACCESS_TOKEN'))
line_handler = WebhookHandler(os.getenv('LINE_CHANNEL_SECRET'))


@app.route("/callback", methods=['POST'])
def callback():
    signature = request.headers['X-Line-Signature']
    body = request.get_data(as_text=True)
    try:
        line_handler.handle(body, signature)
    except InvalidSignatureError:
        abort(400)
    return 'OK'


@line_handler.add(MessageEvent, message=TextMessageContent)
def handle_message(event):
    with ApiClient(configuration) as api_client:
        if event.message.text == 'confirm':
            reply_message = TemplateMessage(
                alt_text="ConfirmTemplate",
                template=ConfirmTemplate(
                    text="你喜歡葬送的芙莉蓮嗎？",
                    actions=[
                        MessageAction(label="是", text="我很喜歡芙莉蓮喔！"),
                        MessageAction(label="否", text="其實我超喜歡，但要傲嬌的說否")
                    ]
                )
            )
        elif event.message.text == 'buttons':
            reply_message = TemplateMessage(
                alt_text="ButtonsTemplate",
                template=ButtonsTemplate(
                    thumbnail_image_url='https://cdn.pixabay.com/photo/2018/10/20/09/28/budapest-3760434_1280.jpg',
                    title="Budapest",
                    text="布達佩斯是匈牙利首都",
                    actions=[
                        URIAction(label="維基資料", uri="https://zh.wikipedia.org/zh-tw/%E5%B8%83%E8%BE%BE%E4%BD%A9%E6%96%AF"),
                        LocationAction(label="傳送位置"),
                        CameraAction(label="拍照上傳"),
                        CameraRollAction(label="從相簿選擇")
                    ]
                )
            )
        elif event.message.text == 'carousel':
            carousel_template = CarouselTemplate(
                columns=[
                    CarouselColumn(
                        thumbnail_image_url='https://upload.wikimedia.org/wikipedia/zh/7/7d/Summer_Wars_poster.jpg',
                        title='夏日大作戰',
                        text='2009年上映的日本科幻暨浪漫電影',
                        actions=[
                            URIAction(label='查看詳情', uri='https://zh.wikipedia.org/zh-tw/%E5%A4%8F%E6%97%A5%E5%A4%A7%E4%BD%9C%E6%88%B0'),
                            PostbackAction(label='投票', data='action=vote&item=a')
                        ]
                    ),
                    CarouselColumn(
                        thumbnail_image_url='https://upload.wikimedia.org/wikipedia/zh/thumb/4/4f/Castle_of_Cagliostro_poster.png/250px-Castle_of_Cagliostro_poster.png',
                        title='魯邦三世卡里奧斯特羅城',
                        text='1979年上映的日本動畫動作冒險喜劇電影',
                        actions=[
                            URIAction(label='查看詳情', uri='https://zh.wikipedia.org/zh-tw/%E9%AD%AF%E9%82%A6%E4%B8%89%E4%B8%96_%E5%8D%A1%E9%87%8C%E5%A5%A7%E6%96%AF%E7%89%B9%E7%BE%85%E4%B9%8B%E5%9F%8E'),
                            PostbackAction(label='投票', data='action=vote&item=b')
                        ]
                    )
                ]
            )
            reply_message = TemplateMessage(
                alt_text='CarouselTemplate',
                template=carousel_template
            )
        elif event.message.text == 'imgCarousel':
            image_carousel_template = ImageCarouselTemplate(
                columns=[
                    ImageCarouselColumn(
                        image_url='https://upload.wikimedia.org/wikipedia/zh/7/7d/Summer_Wars_poster.jpg',
                        action=URIAction(
                            label='查看詳情',
                            uri='https://zh.wikipedia.org/zh-tw/%E5%A4%8F%E6%97%A5%E5%A4%A7%E4%BD%9C%E6%88%B0'
                        )
                    ),
                    ImageCarouselColumn(
                        image_url='https://upload.wikimedia.org/wikipedia/zh/thumb/4/4f/Castle_of_Cagliostro_poster.png/250px-Castle_of_Cagliostro_poster.png',
                        action=URIAction(
                            label='查看詳情',
                            uri='https://zh.wikipedia.org/zh-tw/%E9%AD%AF%E9%82%A6%E4%B8%89%E4%B8%96_%E5%8D%A1%E9%87%8C%E5%A5%A7%E6%96%AF%E7%89%B9%E7%BE%85%E4%B9%8B%E5%9F%8E'
                        )
                    )
                ]
            )

            reply_message = TemplateMessage(
                alt_text='ImageCarouselTemplate',
                template=image_carousel_template
            )
        else:
            reply_message = TextMessage(text='Please type in: confirm, buttons, carousel, imgCarousel')

        line_bot_api = MessagingApi(api_client)
        line_bot_api.reply_message(
            ReplyMessageRequest(
                reply_token=event.reply_token,
                messages=[
                    reply_message
                ]
            )
        )


@line_handler.add(PostbackEvent)
def handle_postback(event):
    with ApiClient(configuration) as api_client:
        if event.postback.data == 'action=vote&item=a':
            reply_message = TextMessage(text='你選了 夏日大作戰')
        elif event.postback.data == 'action=vote&item=b':
            reply_message = TextMessage(text='你選了 魯邦三世卡里奧斯特羅城')
        elif event.postback.data == 'action=richmenu':
            dt = event.postback.params.get('datetime')
            reply_message = TextMessage(text=f'你選的時間：{dt}')
        else:
            reply_message = TextMessage(text=f'你選了：{event.postback.data}')

        line_bot_api = MessagingApi(api_client)
        line_bot_api.reply_message(
            ReplyMessageRequest(
                reply_token=event.reply_token,
                messages=[
                    reply_message
                ]
            )
        )


if __name__ == "__main__":
    app.run()